import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

interface OrderItem {
  product_id: string;
  product_name: string;
  product_image: string;
  quantity: number;
  price: number;
}

interface OrderData {
  items: OrderItem[];
  total: number;
  customerEmail: string;
  shippingAddress: {
    name: string;
    phone: string;
    address: string;
    city: string;
    pincode: string;
    state: string;
    country: string;
  };
  paymentMethod: string;
}


export async function POST(request: NextRequest) {
  try {
    console.log("=== ORDER CREATION START ===");
    const orderData: OrderData = await request.json();
    console.log("Received order data:", JSON.stringify(orderData, null, 2));
    console.log("Order data validation:", {
      hasItems: orderData.items && Array.isArray(orderData.items) && orderData.items.length > 0,
      total: orderData.total,
      hasShippingAddress: !!orderData.shippingAddress,
      hasName: !!orderData.shippingAddress?.name,
      hasPhone: !!orderData.shippingAddress?.phone,
      itemsCount: orderData.items?.length || 0
    });
    
    // Validate orderData structure
    if (!orderData || !orderData.items || !Array.isArray(orderData.items)) {
      console.error("Invalid order data structure:", orderData);
      return NextResponse.json(
        { success: false, message: "Invalid order data: items array is required" },
        { status: 400 }
      );
    }
    
    // Convert items to your format with product details
    const formattedItems = orderData.items.map((item: OrderItem) => ({
      qty: item.quantity,
      kind: 'product',
      productId: item.product_id,
      product_name: item.product_name,
      product_image: item.product_image,
      price: item.price
    }));

    // Calculate total from items if not provided
    const calculatedTotal = orderData.total || formattedItems.reduce((sum, item) => {
      return sum + (item.price * item.qty);
    }, 0);

    // Save order to Supabase using absolute minimal fields
    const orderInsertData: any = {
      client: orderData.shippingAddress?.name || 'Guest Customer',
      order_date: new Date().toISOString(),
      status: 'Pending', // Use valid status that works with database constraint
      items: formattedItems,
      total: calculatedTotal
      // order_number will be automatically generated by the database trigger
    };

    // Add optional fields only if they exist
    if (orderData.shippingAddress) {
      orderInsertData.message = `${orderData.shippingAddress.address}, ${orderData.shippingAddress.city}, ${orderData.shippingAddress.state}, ${orderData.shippingAddress.country} - ${orderData.shippingAddress.pincode}`;
    }
    
    // Add discount field
    orderInsertData.discount = 0.00;

    // Add payment method if available
    if (orderData.paymentMethod) {
      orderInsertData.payment_method = orderData.paymentMethod;
    } else {
      orderInsertData.payment_method = 'cod'; // Default to COD
    }
    
    // Add payment status
    orderInsertData.payment_status = 'pending';

    console.log("Attempting to insert order with data:", JSON.stringify(orderInsertData, null, 2));
    console.log("Order insert data validation:", {
      hasClient: !!orderInsertData.client,
      hasOrderDate: !!orderInsertData.order_date,
      hasStatus: !!orderInsertData.status,
      hasItems: !!orderInsertData.items,
      hasTotal: !!orderInsertData.total,
      totalValue: orderInsertData.total,
      itemsCount: orderInsertData.items?.length || 0
    });
    
    const { data, error } = await supabase
      .from('orders')
      .insert(orderInsertData)
      .select()
      .single();
    
    if (error) {
      console.error("=== DATABASE ERROR ===");
      console.error("Database error:", error);
      console.error("Error code:", error.code);
      console.error("Error message:", error.message);
      console.error("Error details:", error.details);
      console.error("Error hint:", error.hint);
      console.error("Full error object:", JSON.stringify(error, null, 2));
      
      // Check if it's a missing column error
      if (error.code === 'PGRST204') {
        let missingColumn = 'unknown';
        let solution = 'Run the database migration script';
        
        if (error.message.includes('total')) {
          missingColumn = 'total';
          solution = 'Run the FIX_ORDERS_TOTAL_COLUMN.sql script in your Supabase SQL Editor';
        } else if (error.message.includes('payment_method')) {
          missingColumn = 'payment_method';
          solution = 'Run the FIX_MISSING_COLUMNS.sql script in your Supabase SQL Editor';
        } else if (error.message.includes('payment_status')) {
          missingColumn = 'payment_status';
          solution = 'Run the FIX_MISSING_COLUMNS.sql script in your Supabase SQL Editor';
        }
        
        return NextResponse.json(
          { 
            success: false, 
            message: `Database schema issue: '${missingColumn}' column is missing from orders table. Please run the database migration script.`,
            error: error.message,
            code: error.code,
            missingColumn,
            solution
          },
          { status: 500 }
        );
      }
      
      return NextResponse.json(
        { 
          success: false, 
          message: "Failed to save order to database",
          error: error.message,
          code: error.code,
          details: error.details || null,
          hint: error.hint || null
        },
        { status: 500 }
      );
    }
    
    console.log("Order saved successfully:", data);
    
    // Update client information if phone number exists
    if (orderData.shippingAddress?.phone) {
      try {
        const cleanPhone = orderData.shippingAddress.phone.replace(/\D/g, "");
        
        // Check if client exists
        const { data: existingClient } = await supabase
          .from('clients')
          .select('id')
          .eq('phone', cleanPhone)
          .single();
        
        if (existingClient) {
          // Update existing client with new information
          const clientUpdateData: any = {
            name: orderData.shippingAddress.name,
            address: orderData.shippingAddress.address,
            city: orderData.shippingAddress.city,
            pincode: orderData.shippingAddress.pincode,
            state: orderData.shippingAddress.state,
            country: orderData.shippingAddress.country,
          };
          
          // Only update email if it's provided and not empty
          if (orderData.customerEmail && orderData.customerEmail.trim()) {
            clientUpdateData.email = orderData.customerEmail;
          }
          
          const { error: clientError } = await supabase
            .from('clients')
            .update(clientUpdateData)
            .eq('id', existingClient.id);
          
          if (clientError) {
            console.error("Client update error:", clientError);
          } else {
            console.log("Client information updated successfully");
          }
        } else {
          // Create new client record
          const newClientData = {
            name: orderData.shippingAddress.name,
            phone: cleanPhone,
            address: orderData.shippingAddress.address,
            email: orderData.customerEmail || null,
            city: orderData.shippingAddress.city || null,
            pincode: orderData.shippingAddress.pincode || null,
            state: orderData.shippingAddress.state || null,
            country: orderData.shippingAddress.country || null,
            created_at: new Date().toISOString()
          };
          
          const { error: clientError } = await supabase
            .from('clients')
            .insert(newClientData);
          
          if (clientError) {
            console.error("Client creation error:", clientError);
          } else {
            console.log("New client created successfully");
          }
        }
      } catch (clientError) {
        console.error("Error updating client:", clientError);
        // Don't fail the order if client update fails
      }
    }
    
    // TODO: Send confirmation email
    // TODO: Update inventory
    // TODO: Create shipping label
    
    const response = {
      success: true,
      orderId: data.id,
      id: data.id, // Also include as 'id' for compatibility
      orderNumber: data.order_number, // Include the generated order number
      message: "Order created successfully"
    };
    
    console.log("=== ORDER CREATION SUCCESS ===");
    console.log("Returning response:", JSON.stringify(response, null, 2));
    
    return NextResponse.json(response);
    
  } catch (error) {
    console.error("Order creation error:", error);
    return NextResponse.json(
      { success: false, message: "Failed to create order" },
      { status: 500 }
    );
  }
}
